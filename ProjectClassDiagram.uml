
@startuml
  skinparam defaultFontName Consolas

  AddObject <|--  ViewPortObserver
  AddObject  *--  ViewPort                 : viewPort*

  DisplayFile        -left[hidden]> ViewWindow
  DisplayFile "1\n"  *-down- "*" DrawableObject

  Line    <|-up- DrawableObject
  Point   <|-up- DrawableObject
  Polygon <|-up- DrawableObject

  MainWindow *-down-  ViewPort             : viewPort
  MainWindow *-right- AddObject            : addObject
  MainWindow *-left-  AddTransformation    : addTransformation

  AddTransformation  *--  ViewPort         : viewPort*
  AddTransformation  *-down- Transformation: transformation
  Transformation "1" *-- "*" TransformationData: transformations

  ViewPort   *--  ViewWindow               : viewWindow
  ViewPort   *-down-  DisplayFile          : displayFile
  ViewPort   *-right- ViewPortObservers    : viewPortObservers

  ViewPortObservers "1" *-up- "*" ViewPortObserver: observers

  class AddObject {
    Gtk::Grid              point_grid
    Gtk::Grid              line_grid
    Gtk::Grid              polygn_grid
    Gtk::Window*           getWindow()
    std::list<Coordinate*> polygon_cord_list
  }

  class DisplayFile {
    std::map< string, DrawableObject* >
    void addObject   (DrawableObject* object)
    void removeObject(DrawableObject* object)

    void removeObjectByName(std::string name)
    void apply(std::string object_name, Transformation)
  }

  class DrawableObject {
    std::string       getName()
    list<Coordinate*> getCoordinates()
    void              apply(Transformation)
  }

  class Line {
    Line(std::string name, Coordinate*, Coordinate*)
  }

  class Point {
    Point(std::string name, Coordinate*)
  }

  class Polygon {
    Polygon(std::string name, list<Coordinate*>)
  }

  class MainWindow {
    ViewPort     viewPort
    AddObject    addObject
    Gtk::Box     main_box
    Gtk::Box     left_box
    Gtk::Frame   left_frame
    Gtk::Frame   right_frame
    Gtk::Window* getWindow()
  }

  class Transformation {
    MatrixForm _transformation
    Coordinate apply(Coordinate)
    void set_geometric_center(Coordinate)
  }

  class TransformationData {
    MatrixForm main_matrix
    Coordinate rotation_center
  }

  class AddTransformation {
    Gtk::Grid    rotation_grid
    Gtk::Grid    scaling_grid
    Gtk::Grid    translation_grid
    Gtk::Window* getWindow()
  }

  class ViewPort {
    int Xvpmin
    int Yvpmin
    int Xvpmax
    int Yvpmax
    bool on_draw(const Cairo::Context>&)
    void updateViewport(Gtk::Allocation)

    Coordinate convertCoordinateFromWindow(Coordinate)
    void apply(std::string object_name, Transformation)
  }

  class ViewPortObserver {
    void updateDropdownList()
  }

  class ViewPortObservers {
    void notifyObservers()
    void addObserver(ViewPortObserver*)
  }

  class ViewWindow {
    float Xwmin
    float Ywmin
    float Xwmax
    float Ywmax
    void zoom_in (float scale)
    void zoom_out(float scale)
    void move_up    (int length)
    void move_down  (int length)
    void move_left  (int length)
    void move_right (int length)
  }

@enduml
