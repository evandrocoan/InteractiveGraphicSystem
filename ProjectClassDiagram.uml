
@startuml
  skinparam defaultFontName Consolas

  AddObject <|--  ViewPortObserver
  AddObject  *--  ViewPort                 : viewPort&

  AddTransformation  *--  ViewPort         : viewPort&
  AddTransformation  *-down- Transformation: transformation

  DisplayFile        -left[hidden]> ViewWindow
  DisplayFile "1\n"  *-down- "*" DrawableObject

  Line    <|-up- DrawableObject
  Point   <|-up- DrawableObject
  Polygon <|-up- DrawableObject

  MainWindow *-down-  ViewPort             : viewPort
  MainWindow *-right- AddObject            : addObject
  MainWindow *-left-  AddTransformation    : addTransformation

  Transformation "1" *-- "*" TransformationData: transformations
  TransformationData *-- TransformationType: type
  TransformationData *-- RotationType      : rotation_type

  ViewPort   *--  ViewWindow               : viewWindow
  ViewPort   *-down-  DisplayFile          : displayFile
  ViewPort   *-right- ViewPortObservers    : viewPortObservers

  ViewPortObservers "1" *-up- "*" ViewPortObserver: observers

  class AddObject {
    Gtk::Grid              point_grid
    Gtk::Grid              line_grid
    Gtk::Grid              polygn_grid
    Gtk::Window&           getWindow()
    std::list<Coordinate*> polygon_coord_list
  }

  class AddTransformation {
    Gtk::Grid    rotation_grid
    Gtk::Grid    scaling_grid
    Gtk::Grid    translation_grid
    Gtk::Window& getWindow()
  }

  class DisplayFile {
    std::map<string, DrawableObject*>

    std::list<std::string>     getNamesList();
    std::list<DrawableObject*> getObjects();
    DrawableObject*   getObjectByName(std::string name);
    bool              isObjectOnByName(std::string name);
    void            addObject(DrawableObject* object);
    void            removeObject(DrawableObject* object);
    void            removeObjectByName(std::string name);
    void apply(std::string object_name, Transformation&);
  }

  class DrawableObject {
    std::string        getName()
    list<Coordinate*>& getCoordinates()
    void               apply(Transformation&)
  }

  class Line {
    Line(std::string name, Coordinate*, Coordinate*)
  }

  class Point {
    Point(std::string name, Coordinate*)
  }

  class Polygon {
    Polygon(std::string name, list<Coordinate*>)
  }

  class MainWindow {
    Gtk::Box     main_box
    Gtk::Box     left_box
    Gtk::Frame   left_frame
    Gtk::Frame   right_frame
    Gtk::Window& getWindow()
  }

  class RotationType {
    enum ON_WORLD_CENTER
    enum ON_ITS_OWN_CENTER
    enum ON_GIVEN_COORDINATE
  }

  class Transformation {
    MatrixForm _transformation
    Coordinate apply(Coordinate&)
    void set_geometric_center(Coordinate&)
  }

  class TransformationData {
    MatrixForm  matrix
    Coordinate  rotation_center
    std::string name
  }

  class TransformationType {
    enum SCALING
    enum ROTATION
    enum TRANSLATION
  }

  class ViewPort {
    int Xvpmin
    int Yvpmin
    int Xvpmax
    int Yvpmax
    bool on_draw(const Cairo::Context>&)
    void updateViewport(Gtk::Allocation&)

    Coordinate convertCoordinateFromWindow(Coordinate&)
    void apply(std::string object_name, Transformation&)
  }

  class ViewPortObserver {
    void updateDropdownList()
  }

  class ViewPortObservers {
    void notifyObservers()
    void addObserver(ViewPortObserver*)
  }

  class ViewWindow {
    float Xwmin
    float Ywmin
    float Xwmax
    float Ywmax
    void zoom_in (float scale)
    void zoom_out(float scale)
    void move_up    (int length)
    void move_down  (int length)
    void move_left  (int length)
    void move_right (int length)
  }

@enduml
