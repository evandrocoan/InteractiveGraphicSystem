
@startuml
  skinparam defaultFontName Consolas
  skinparam nodesep 20
  skinparam ranksep 30

  AddObject  *--  DrawingArea              : drawingArea&

  AddTransformation  *--  DrawingArea      : drawingArea&
  AddTransformation  *-down- Transformation: transformation

  DisplayFile        -left[hidden]> ViewWindow
  DisplayFile "1\n"  *-down- "*" DrawableObject

  DrawingArea *-- ViewPort                 : viewPort
  DrawingArea *-- ViewWindow               : viewWindow
  DrawingArea *-down- DisplayFile          : displayFile

  Line    <|-up- DrawableObject
  Point   <|-up- DrawableObject
  Polygon <|-up- DrawableObject

  MainWindow *-down-  DrawingArea          : drawingArea
  MainWindow *-right- AddObject            : addObject
  MainWindow *-left-  AddTransformation    : addTransformation

  Transformation "1" *-- "*" TransformationData: transformations
  TransformationData *-- TransformationType: type
  TransformationData *-- RotationType      : rotation_type

  class AddObject {
    Gtk::Grid       point_grid
    Gtk::Grid       line_grid
    Gtk::Grid       polygn_grid
    Gtk::Window&    getWindow()
    std::list<int*> polygon_coord_list
  }

  class AddTransformation {
    Gtk::Grid rotation_grid
    Gtk::Grid scaling_grid
    Gtk::Grid translation_grid
    Gtk::Grid coodinate_input_grid
    Gtk::Box& getBox()
  }

  class DisplayFile {
    std::map<string, DrawableObject*>

    std::list<std::string>     getNamesList()
    std::list<DrawableObject*> getObjects()
    DrawableObject*   getObjectByName(std::string name)
    bool              isObjectOnByName(std::string name)
    void            addObject(DrawableObject* object)
    void            removeObject(DrawableObject* object)
    void            removeObjectByName(std::string name)
    void apply(std::string object_name, Transformation&)
  }

  class DrawableObject {
    std::string  getName()
    void         addLine()
    void         addPoint()
    void         addPolygon()
    void         updateClipping();
    void         apply(Transformation&)
    list<Coordinate*>& getWorldCoordinates()
    list<Coordinate*>& getClippedCoordinates()
    list<Coordinate*>& getViewWindowCoordinates()
  }

  class DrawingArea {
    Signal<> callObservers
    Signal<>::Connection _connection
    void addPoint(std::string name, int, int)
    void addLine(std::string name, int, int, int, int)
    void addPolygon(std::string name, std::list<int>)
    Coordinate convertCoordinateFromWindow(Coordinate&)
    void updateClipping();
    void apply(std::string object_name, Transformation&)
  }

  class Line {
    Line(Coordinate*, Coordinate*)
  }

  class Point {
    Point(Coordinate*)
  }

  class Polygon {
    Polygon(list<Coordinate*>)
  }

  class MainWindow {
    Gtk::Box     main_box
    Gtk::Box     left_box
    Gtk::Frame   left_frame
    Gtk::Frame   right_frame
    Gtk::Window& getWindow()
  }

  class RotationType {
    enum ON_WORLD_CENTER
    enum ON_ITS_OWN_CENTER
    enum ON_GIVEN_COORDINATE
  }

  class Transformation {
    MatrixForm _transformation
    Coordinate apply(Coordinate&)
    void set_geometric_center(Coordinate&)
  }

  class TransformationData {
    MatrixForm  matrix
    Coordinate  rotation_center
    std::string name
  }

  class TransformationType {
    enum SCALING
    enum ROTATION
    enum TRANSLATION
  }

  class ViewPort {
    int xMin
    int yMin
    int xMax
    int yMax
    Array<2, Coordinate*> x1
    Array<2, Coordinate*> x2
    Array<2, Coordinate*> y1
    Array<2, Coordinate*> y2
    Coordinate* _data[4]
    Coordinate* getPoint(unsigned int index)
    void updateClippingWindowSize(int, int)
  }

  class ViewWindow {
    float xWmin
    float yWmin
    float xWmax
    float yWmax
    Signal<> callObservers
    Signal<>::Connection addObserver(...)
    void zoom_in  (float scale)
    void zoom_out (float scale)
    void move_up   (int length)
    void move_down (int length)
    void move_left (int length)
    void move_right(int length)
  }

@enduml
